package cliente;

import dao.GenericInsertUpdateDelete;
import facades.FacadeAdministrador;
import java.awt.Image;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import pojos.Animal;
import pojos.Dicas;
import servidor.I_RMI;

public class LayoutAdministrador extends javax.swing.JDialog {
    Animal animal = new Animal();
    JFileChooser chooser = new JFileChooser();
    I_RMI servidor; 
    LoginDialog loginDialog;
    int vlrJDoFor = 0;
    int insistiuEmCancelar = 0;
    boolean apertouNoAddDica = false;
    boolean apertouNoFinalizaDica = false;
    StringBuilder codDicasSelecionadas = new StringBuilder();
    /** Creates new form LayoutAdministrador */
    
    public LayoutAdministrador(LoginDialog loginDialo) {
        initComponents();
        codOculto.setVisible(false);
        codOculto.setEnabled(false);
        listagemDicas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); 
        listagemDicas.setCellSelectionEnabled(true);
        listagemDicas.setColumnSelectionAllowed(false);
        listagemDicas.setColumnSelectionInterval(0, 1); 
        
        dicasJaSelecionadas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); 
        dicasJaSelecionadas.setCellSelectionEnabled(true);
        dicasJaSelecionadas.setColumnSelectionAllowed(false);
        dicasJaSelecionadas.setColumnSelectionInterval(0, 1); 
        
        loginDialog = loginDialo;
        loginDialo.senha.setText("");
        loginDialog.dispose();
        
        this.setLocationRelativeTo(this);
        this.setTitle("Cadastro de animais para jogar");

        chooser.setFileFilter(new FileNameExtensionFilter("Imagem JPG", "jpg"));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
                                 // COMEÇO PADRAO FAÇADE
        FacadeAdministrador facadeAdministrador = new FacadeAdministrador();
        ArrayList dadosFacade = facadeAdministrador.fachadaAdm();   
        servidor = (I_RMI) dadosFacade.get(0);
        populaTable((List)dadosFacade.get(1));
        listagemDicas.setVisible(true);
                                // FIM PADRAO FAÇADE
        
        this.setModal(true);
        this.setVisible(true);
    }
    
    private void populaTable(List dados){
           listagemDicas.removeAll();            
           DefaultTableModel modelo = (DefaultTableModel) listagemDicas.getModel();
           modelo.setNumRows(0);
           try{
                for (int i = 0; i < dados.size(); i++) {
                    Dicas dica = (Dicas)dados.get(i);                
                    int codigo = dica.getCodigo();
                    String descricao = dica.getDescricao();
                    modelo.addRow(new Object[]{codigo,descricao});
                }
                listagemDicas.setModel(modelo);
          }catch(Exception ex){
              ex.printStackTrace();
          }
    }
    
     private void populaTableDicasJaAdd(Dicas dados){          
           DefaultTableModel modelo = (DefaultTableModel) dicasJaSelecionadas.getModel();
           try{
                    int codigo = dados.getCodigo();
                    String descricao = dados.getDescricao();
                    modelo.addRow(new Object[]{codigo,descricao});
                
                dicasJaSelecionadas.setModel(modelo);
          }catch(Exception ex){
              ex.printStackTrace();
          }
    }
    
    public void dadosParaListagemDicas(){
        try {
            List retorno = servidor.selectDicas();
            populaTable(retorno);
            
            listagemDicas.setVisible(true);
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
    }
    
    private LayoutAdministrador() { }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nomeDoAnimal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fotoNormal = new javax.swing.JLabel();
        procurarOriginal = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fotoSombreada = new javax.swing.JLabel();
        procurarFotoSombreada = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        gravar = new javax.swing.JButton();
        atualizar = new javax.swing.JButton();
        novo = new javax.swing.JButton();
        deletar = new javax.swing.JButton();
        pesquisar = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        criarNovaDica = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listagemDicas = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dicaEspecial = new javax.swing.JTextArea();
        codOculto = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        dicasJaSelecionadas = new javax.swing.JTable();
        tiraDica = new javax.swing.JButton();
        addDicaPraBaixo = new javax.swing.JButton();
        finalizaDicas = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        filtroDicas = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setText("Nome do animal:");
        jLabel1.setName("jLabel1"); // NOI18N

        nomeDoAnimal.setName("nomeDoAnimal"); // NOI18N

        jLabel2.setText("Foto Normal:");
        jLabel2.setName("jLabel2"); // NOI18N

        fotoNormal.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 255), 1, true));
        fotoNormal.setName("fotoNormal"); // NOI18N

        procurarOriginal.setText("Procurar...");
        procurarOriginal.setName("procurarOriginal"); // NOI18N
        procurarOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procurarOriginalActionPerformed(evt);
            }
        });

        jLabel3.setText("Foto Sombreada:");
        jLabel3.setName("jLabel3"); // NOI18N

        fotoSombreada.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 255), 1, true));
        fotoSombreada.setName("fotoSombreada"); // NOI18N

        procurarFotoSombreada.setText("Procurar...");
        procurarFotoSombreada.setName("procurarFotoSombreada"); // NOI18N
        procurarFotoSombreada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procurarFotoSombreadaActionPerformed(evt);
            }
        });

        jSeparator1.setName("jSeparator1"); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Dicas:");
        jLabel4.setName("jLabel4"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        gravar.setText("Gravar");
        gravar.setName("gravar"); // NOI18N
        gravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gravarActionPerformed(evt);
            }
        });

        atualizar.setText("Atualizar");
        atualizar.setName("atualizar"); // NOI18N
        atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarActionPerformed(evt);
            }
        });

        novo.setText("Novo");
        novo.setName("novo"); // NOI18N
        novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoActionPerformed(evt);
            }
        });

        deletar.setText("Deletar");
        deletar.setName("deletar"); // NOI18N
        deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarActionPerformed(evt);
            }
        });

        pesquisar.setText("Pesquisar");
        pesquisar.setName("pesquisar"); // NOI18N
        pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarActionPerformed(evt);
            }
        });

        sair.setText("Sair");
        sair.setName("sair"); // NOI18N
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });

        criarNovaDica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cliente/resources/mais.gif"))); // NOI18N
        criarNovaDica.setToolTipText("Adicionar nova dica");
        criarNovaDica.setName("criarNovaDica"); // NOI18N
        criarNovaDica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarNovaDicaActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listagemDicas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Código", "Descrição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listagemDicas.setColumnSelectionAllowed(true);
        listagemDicas.setName("listagemDicas"); // NOI18N
        listagemDicas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(listagemDicas);
        listagemDicas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listagemDicas.getColumnModel().getColumn(0).setPreferredWidth(5);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText("Dica Especial:");
        jLabel5.setName("jLabel5"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        dicaEspecial.setColumns(20);
        dicaEspecial.setRows(5);
        dicaEspecial.setName("dicaEspecial"); // NOI18N
        dicaEspecial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dicaEspecialFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(dicaEspecial);

        codOculto.setName("codOculto"); // NOI18N

        jSeparator3.setName("jSeparator3"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        dicasJaSelecionadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dicasJaSelecionadas.setColumnSelectionAllowed(true);
        dicasJaSelecionadas.setName("dicasJaSelecionadas"); // NOI18N
        dicasJaSelecionadas.getTableHeader().setReorderingAllowed(false);
        dicasJaSelecionadas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dicasJaSelecionadasFocusLost(evt);
            }
        });
        jScrollPane3.setViewportView(dicasJaSelecionadas);
        dicasJaSelecionadas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dicasJaSelecionadas.getColumnModel().getColumn(0).setPreferredWidth(5);

        tiraDica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cliente/resources/deletar.png"))); // NOI18N
        tiraDica.setToolTipText("Tirar a dica selecionada para este animal");
        tiraDica.setName("tiraDica"); // NOI18N
        tiraDica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiraDicaActionPerformed(evt);
            }
        });

        addDicaPraBaixo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cliente/resources/praBaixo.png"))); // NOI18N
        addDicaPraBaixo.setToolTipText("Adicionar dica selecionada ao animal");
        addDicaPraBaixo.setName("addDicaPraBaixo"); // NOI18N
        addDicaPraBaixo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDicaPraBaixoActionPerformed(evt);
            }
        });

        finalizaDicas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cliente/resources/ok.png"))); // NOI18N
        finalizaDicas.setToolTipText("Confirmar as 5 dicas para este animal");
        finalizaDicas.setName("finalizaDicas"); // NOI18N
        finalizaDicas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizaDicasActionPerformed(evt);
            }
        });

        jSeparator4.setName("jSeparator4"); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel6.setText("Filtrar listagem de dicas:");
        jLabel6.setName("jLabel6"); // NOI18N

        filtroDicas.setName("filtroDicas"); // NOI18N
        filtroDicas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filtroDicasKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(fotoNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(fotoSombreada, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(nomeDoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(procurarOriginal)
                        .addGap(79, 79, 79)
                        .addComponent(codOculto, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addComponent(procurarFotoSombreada)
                        .addGap(39, 39, 39))
                    .addComponent(jLabel2)))
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(criarNovaDica, javax.swing.GroupLayout.PREFERRED_SIZE, 56, Short.MAX_VALUE)
                            .addComponent(addDicaPraBaixo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tiraDica, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(finalizaDicas, 0, 0, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(novo)
                                .addGap(18, 18, 18)
                                .addComponent(gravar)
                                .addGap(18, 18, 18)
                                .addComponent(atualizar)
                                .addGap(18, 18, 18)
                                .addComponent(deletar)
                                .addGap(18, 18, 18)
                                .addComponent(pesquisar)
                                .addGap(18, 18, 18)
                                .addComponent(sair))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                                .addGap(14, 14, 14))
                            .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(217, 217, 217)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filtroDicas, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(243, 243, 243)
                .addComponent(jLabel4)
                .addContainerGap(260, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nomeDoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(57, 57, 57)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fotoNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fotoSombreada, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(procurarFotoSombreada))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jLabel2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(procurarOriginal)
                            .addComponent(codOculto, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(filtroDicas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(criarNovaDica)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addDicaPraBaixo, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tiraDica, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(finalizaDicas, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(novo)
                    .addComponent(gravar)
                    .addComponent(atualizar)
                    .addComponent(deletar)
                    .addComponent(pesquisar)
                    .addComponent(sair)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//        private void instanciaConexaoServidor(){
//         try {
//            Registry registry = LocateRegistry.getRegistry("localhost");
//            servidor = (I_RMI) Naming.lookup("rmi://localhost:1099/JogoEducativo");
//            } catch (RemoteException e) {
//            System.out.println();
//            System.out.println("RemoteException: " + e.toString());
//        } catch (NotBoundException e) {
//            System.out.println();
//            System.out.println("NotBoundException: " + e.toString());
//        } catch (Exception e) {
//            System.out.println("Erro: " + e.getMessage());
//        }
//    }    
//    
    public byte[] imageToByte(String image) throws IOException {
	InputStream is = null;
	byte[] buffer = null;
	is = new FileInputStream(image);
	buffer = new byte[is.available()];
	is.read(buffer);
	is.close();
        return buffer;
    }

    public void ByteParaImagemNormal(byte[] bytes) throws Exception {
	try {      
               ImageIcon logo = new ImageIcon(bytes);
               fotoNormal.setIcon(new ImageIcon(logo.getImage().getScaledInstance(fotoNormal.getWidth(), fotoNormal.getHeight()
                                                                                  , Image.SCALE_DEFAULT)));
        } catch (Exception e) {
                e.printStackTrace();
        }
    }
    
    public void ByteParaImagemSombreada(byte[] bytes) throws Exception {
	try {      
               ImageIcon logo = new ImageIcon(bytes);
               fotoSombreada.setIcon(new ImageIcon(logo.getImage().getScaledInstance(fotoSombreada.getWidth(), fotoSombreada.getHeight()
                                                                                  , Image.SCALE_DEFAULT)));
        } catch (Exception e) {
                e.printStackTrace();
        }
    }
    private void procurarOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procurarOriginalActionPerformed
       String nomeDoArquivo = "";
       chooser.setDialogTitle("Faça o upload da imagem normal do animal");       
        int rc = chooser.showOpenDialog(this);
       if(JFileChooser.APPROVE_OPTION == rc){
            try {
                nomeDoArquivo = chooser.getSelectedFile().getName();
                System.out.println("nome do arquivo:"+nomeDoArquivo);
                animal.setFotoNormal(imageToByte(chooser.getSelectedFile().getAbsolutePath()));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            insistiuEmCancelar = 0;
       }
       if(animal.getFotoNormal()!= null){
            try {
                ByteParaImagemNormal(animal.getFotoNormal());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            if(!nomeDoAnimal.equals(nomeDoArquivo)){
                int iniExtensao = nomeDoArquivo.indexOf(".jpg");                                     
                String nomeCerto = nomeDoArquivo.substring(0, iniExtensao);
                nomeDoAnimal.setText(nomeCerto);
                animal.setNome(nomeCerto);
            }
       }else{
           insistiuEmCancelar++;
           JOptionPane.showMessageDialog(null,"Você deve selecionar uma imagem!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
          if(insistiuEmCancelar <= 1){
              procurarOriginalActionPerformed(evt);
          }
       }
    }//GEN-LAST:event_procurarOriginalActionPerformed

    private void procurarFotoSombreadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procurarFotoSombreadaActionPerformed
       String nomeDoArquivo = "";
       chooser.setDialogTitle("Faça o upload da imagem sombreada do animal");
        int rc = chooser.showOpenDialog(this);
       if(JFileChooser.APPROVE_OPTION == rc){
            try {
                nomeDoArquivo = chooser.getSelectedFile().getName();
                System.out.println("nome do arquivo:"+nomeDoArquivo);
                animal.setFotoComSombra(imageToByte(chooser.getSelectedFile().getAbsolutePath()));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
             insistiuEmCancelar = 0;
       }
       if(animal.getFotoComSombra()!= null){
            try {
                ByteParaImagemSombreada(animal.getFotoComSombra());
            } catch (Exception ex) {
                ex.printStackTrace();
            }            
       }else{
          insistiuEmCancelar++;
           JOptionPane.showMessageDialog(null,"Você deve selecionar uma imagem!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
          if(insistiuEmCancelar <= 1){
              procurarOriginalActionPerformed(evt);
          }
       }
    }//GEN-LAST:event_procurarFotoSombreadaActionPerformed

    private void gravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gravarActionPerformed
        int vlrReturno = -1;
        animal.setDicaEspecial(dicaEspecial.getText());
        try {
            vlrReturno = servidor.gravaAnimal(animal);
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
       if(vlrReturno <=0){
           JOptionPane.showMessageDialog(null,"Erro ao inserir este registro!", "Inserção", JOptionPane.ERROR_MESSAGE);
       }else{
           JOptionPane.showMessageDialog(null,"Registro cadastrado com sucesso!", "Inserção", JOptionPane.INFORMATION_MESSAGE);
       }
    }//GEN-LAST:event_gravarActionPerformed

    private void atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarActionPerformed
        GenericInsertUpdateDelete insertUpdate = new GenericInsertUpdateDelete();
        boolean retorno = false;
        try{
            retorno = insertUpdate.update(animal);
        } catch (NoSuchFieldException ex) {
            ex.printStackTrace();
        } catch (IllegalArgumentException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        }
        if(retorno == true){
            JOptionPane.showMessageDialog(null,"Atualizado com sucesso!", "Atualização", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(null,"Erro ao atualizar o registro!", "Atualização", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_atualizarActionPerformed

    private void limpaCampos(){
        nomeDoAnimal.setText("");
        fotoNormal.setIcon(null);
        fotoSombreada.setIcon(null);
        dicaEspecial.setText("");
        apertouNoAddDica = false;
        apertouNoFinalizaDica = false;
        listagemDicas.clearSelection();
    }
    
    private void novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoActionPerformed
        animal = new Animal();
        limpaCampos();
    }//GEN-LAST:event_novoActionPerformed

    private void deletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarActionPerformed
         try {
            boolean retorno = servidor.deletaAnimal(animal);
            if(retorno == true){
                JOptionPane.showMessageDialog(null,"Registro do animal deletado com sucesso", "Exclusão"
                                               , JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null,"Erro ao deletar o registro de animal", "Exclusão"
                                               , JOptionPane.ERROR_MESSAGE);
            }
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_deletarActionPerformed

    private void pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarActionPerformed
       if(!nomeDoAnimal.getText().equals("")){
            Animal animalSelect = null;
            try {
                animalSelect = servidor.selectAnimal(nomeDoAnimal.getText());
            } catch (RemoteException ex) {
                ex.printStackTrace();
            }
            if(animalSelect != null){
                codOculto.setText(String.valueOf(animalSelect.getCodigo()));
                animal.setCodigo(animalSelect.getCodigo());
                nomeDoAnimal.setText(animalSelect.getNome());
                animal.setNome(animalSelect.getNome());
                dicaEspecial.setText(animalSelect.getDicaEspecial());
                animal.setDicaEspecial(animalSelect.getDicaEspecial());
                animal.setDicas(animalSelect.getDicas());
                
                String linhasSelecNoBanco = animalSelect.getDicas();
                int selLinha = -1;
                int qtdeExecutar = 0;
                
                for (int i = 0; i < linhasSelecNoBanco.length(); i++) {
                    int achouVirgula = linhasSelecNoBanco.indexOf(",", i);
                    if(achouVirgula > 0){
                        qtdeExecutar++;
                    }else{
                        qtdeExecutar++;
                        break;
                    }
                    i = achouVirgula;
                }
                int vlrDelimitador = 0;
                
                for (int i = 0; i < qtdeExecutar; i++) {
                    vlrDelimitador = linhasSelecNoBanco.indexOf(",");
                    if(vlrDelimitador > 0){
                        selLinha = Integer.parseInt(linhasSelecNoBanco.substring(0, vlrDelimitador));
                    }else{
                        selLinha = Integer.parseInt(linhasSelecNoBanco.substring(0, linhasSelecNoBanco.length()));
                    }
                    linhasSelecNoBanco = linhasSelecNoBanco.substring(vlrDelimitador+1, linhasSelecNoBanco.length());
                    for(int j = vlrJDoFor;j<=listagemDicas.getRowCount();j++){                   
                        if(selLinha == (Integer)listagemDicas.getValueAt(j, 0)){
                            listagemDicas.addRowSelectionInterval(j, j);  
                            vlrJDoFor++;
                            break;
                        }                        
                    }
                }                
                try {
                    ByteParaImagemNormal(animalSelect.getFotoNormal());
                    animal.setFotoNormal(animalSelect.getFotoNormal());
                    ByteParaImagemSombreada(animalSelect.getFotoComSombra());
                    animal.setFotoComSombra(animalSelect.getFotoComSombra());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
       }
    }//GEN-LAST:event_pesquisarActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        this.dispose();
        loginDialog.setModal(true);
        loginDialog.setVisible(true);
    }//GEN-LAST:event_sairActionPerformed

    private void criarNovaDicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarNovaDicaActionPerformed
        apertouNoAddDica = true;
        ManipularDicas manipularDicas = new ManipularDicas(this);
        manipularDicas.setModal(true);
        manipularDicas.setVisible(true);
    }//GEN-LAST:event_criarNovaDicaActionPerformed

    private void dicaEspecialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dicaEspecialFocusLost
        if(dicaEspecial.getText().length() < 10){
            JOptionPane.showMessageDialog(null, "Essa dica não pode ser considerada especial, pois é muito pouco explanativa.\n Refaça-a!"
                                                , "Atenção",JOptionPane.WARNING_MESSAGE);  
            dicaEspecial.setFocusable(true);
        }
        animal.setDicaEspecial(dicaEspecial.getText());
    }//GEN-LAST:event_dicaEspecialFocusLost

    private void dicasJaSelecionadasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dicasJaSelecionadasFocusLost
        if(animal.getDicas()==null){
           if(apertouNoFinalizaDica == false){
               listagemDicas.setFocusable(true);
                JOptionPane.showMessageDialog(null,"Voçê deve selecionar 5 dicas para cada animal", "Erro ao informar as Dicas"
                                               , JOptionPane.WARNING_MESSAGE);                
            }
       }
    }//GEN-LAST:event_dicasJaSelecionadasFocusLost

    private void finalizaDicasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizaDicasActionPerformed
         apertouNoFinalizaDica = true;
        int qtdeLinhas = dicasJaSelecionadas.getRowCount();
        if(qtdeLinhas == 5){  
            for(int i =0; i< qtdeLinhas; i++){
                if(i == qtdeLinhas-1){
                    codDicasSelecionadas.append(dicasJaSelecionadas.getValueAt(i, 0));
                }else{
                    codDicasSelecionadas.append(dicasJaSelecionadas.getValueAt(i, 0)).append(",");
                }
            }             
            animal.setDicas(codDicasSelecionadas.toString());    
            System.out.println("Dicas que serão gravadas para este animal: "+codDicasSelecionadas.toString());
        }else if (qtdeLinhas > 5){
            JOptionPane.showMessageDialog(null,"Voçê pode somente atribuir 5 dicas para cada animal", "Erro ao informar as Dicas"
                                               , JOptionPane.WARNING_MESSAGE);
            codDicasSelecionadas = new StringBuilder();
        }else{
            JOptionPane.showMessageDialog(null,"Voçê deve atribuir 5 dicas para cada animal", "Erro ao informar as Dicas"
                                               , JOptionPane.WARNING_MESSAGE);
            codDicasSelecionadas = new StringBuilder();
        }
    }//GEN-LAST:event_finalizaDicasActionPerformed

    private void addDicaPraBaixoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDicaPraBaixoActionPerformed
        try{
            int linhaSelecionada = listagemDicas.getSelectedRow();              
            int qtdeLinhasJaAdd = dicasJaSelecionadas.getRowCount();              
            if(qtdeLinhasJaAdd >= 5){
                JOptionPane.showMessageDialog(null, "Voçê pode somente escolher no maximo 5 dicas", "Atenção", JOptionPane.ERROR_MESSAGE);
            }else{
                Dicas dados = new Dicas();
                dados.setCodigo((Integer)listagemDicas.getValueAt(linhaSelecionada, 0));
                dados.setDescricao(String.valueOf(listagemDicas.getValueAt(linhaSelecionada, 1)));
               
                populaTableDicasJaAdd(dados);               
            }
            
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada para ser adicionada a este animal", "Atenção", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addDicaPraBaixoActionPerformed

    private void tiraDicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiraDicaActionPerformed
         try{
            int linhaSelecionada = dicasJaSelecionadas.getSelectedRow();
            ((DefaultTableModel) dicasJaSelecionadas.getModel()).removeRow(linhaSelecionada);           
         }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(null,"Não há nenhuma linha selecionada ou para selecionar","Erro",JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_tiraDicaActionPerformed

    private void filtroDicasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroDicasKeyReleased
        List<Dicas> dicasFiltradas = null;
        try {
            if(!filtroDicas.getText().equals("")){
                dicasFiltradas = servidor.selectDicas(filtroDicas.getText());
            }else{
                dicasFiltradas = servidor.selectDicas();
            }
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
        populaTable(dicasFiltradas);
    }//GEN-LAST:event_filtroDicasKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LayoutAdministrador().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDicaPraBaixo;
    private javax.swing.JButton atualizar;
    private javax.swing.JLabel codOculto;
    private javax.swing.JButton criarNovaDica;
    private javax.swing.JButton deletar;
    private javax.swing.JTextArea dicaEspecial;
    private javax.swing.JTable dicasJaSelecionadas;
    private javax.swing.JTextField filtroDicas;
    private javax.swing.JButton finalizaDicas;
    private javax.swing.JLabel fotoNormal;
    private javax.swing.JLabel fotoSombreada;
    private javax.swing.JButton gravar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable listagemDicas;
    private javax.swing.JTextField nomeDoAnimal;
    private javax.swing.JButton novo;
    private javax.swing.JButton pesquisar;
    private javax.swing.JButton procurarFotoSombreada;
    private javax.swing.JButton procurarOriginal;
    private javax.swing.JButton sair;
    private javax.swing.JButton tiraDica;
    // End of variables declaration//GEN-END:variables
}
