package cliente;

import dao.DaoDicas;
import java.awt.BorderLayout;
import java.awt.Image;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pojos.Animal;
import pojos.Dicas;
import pojos.Jogador;
import servidor.I_RMI;
import servidor.RMI_ServidorSemRegistry;
import utils.AddDinamicoDe10TextFields;
import utils.AddDinamicoDe3TextFields;
import utils.AddDinamicoDe4TextFields;
import utils.AddDinamicoDe5TextFields;
import utils.AddDinamicoDe6TextFields;
import utils.AddDinamicoDe7TextFields;
import utils.AddDinamicoDe8TextFields;
import utils.AddDinamicoDe9TextFields;

public class LayoutUsuario extends javax.swing.JFrame {
    int numCreditos = 10;
    int vlrMultiplicador = 1000;
    int qtdeDicasRestantes = 5;
    long tempoInicial = 0;
    int retornoVlrMultiplicante = 1000;
    int qtdeFases = 0;
    boolean acabouTempo = false;
    I_RMI servidor;
    Thread t1;    
    LoginDialog loginDialog;
    Animal dadosAnimal;
    
    StringBuilder dicasProAnimal = new StringBuilder();
    StringBuilder dicasJaApresentadas = new StringBuilder();
    
    AddDinamicoDe4TextFields add4 = null;
    AddDinamicoDe3TextFields add3 = null;
    AddDinamicoDe5TextFields add5 = null;
    AddDinamicoDe6TextFields add6 = null;
    AddDinamicoDe7TextFields add7 = null;
    AddDinamicoDe8TextFields add8 = null;
    AddDinamicoDe9TextFields add9 = null;
    AddDinamicoDe10TextFields add10 = null;
    DaoDicas daoDicas = null;
    ArrayList dicasJaMostradas = new ArrayList();
    ArrayList<Animal> animaisJaJogados = new ArrayList();
    
    /** Creates new form LayoutUsuario */
    public LayoutUsuario(LoginDialog loginDialog,Animal primeiroAnimal) throws ParseException {
        initComponents();
        qtdeCreditos.setText(String.valueOf(numCreditos));
        vlrAMultiplicar.setText(String.valueOf(vlrMultiplicador));
        remenberDica.setVisible(false);
        this.dadosAnimal = primeiroAnimal;
        this.loginDialog = loginDialog;
        RMI_ServidorSemRegistry rMI_ServidorSemRegistry = new RMI_ServidorSemRegistry();
        instanciaConexaoServidor();
        novoJogo.setEnabled(false);
        preencheFormPraJogar();   
        gerenciaCrono();
    }

    private LayoutUsuario() { }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNomeAnimal = new javax.swing.JPanel();
        panelCreditos = new javax.swing.JPanel();
        qtdeCreditos = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        vlrAMultiplicar = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        salvarNoRanking = new javax.swing.JButton();
        novaFase = new javax.swing.JButton();
        dicaEspecial = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dicasServidor = new javax.swing.JTable();
        fotoAnimal = new javax.swing.JLabel();
        remenberDica = new javax.swing.JButton();
        maisDica = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        letraDigitada = new javax.swing.JFormattedTextField();
        cronometro = new javax.swing.JLabel();
        novoJogo = new javax.swing.JButton();
        rankingGeral = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(LayoutUsuario.class);
        panelNomeAnimal.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, resourceMap.getColor("panelNomeAnimal.border.insideBorder.highlightInnerColor"), null, null))); // NOI18N
        panelNomeAnimal.setMinimumSize(new java.awt.Dimension(690, 115));
        panelNomeAnimal.setName("panelNomeAnimal"); // NOI18N

        javax.swing.GroupLayout panelNomeAnimalLayout = new javax.swing.GroupLayout(panelNomeAnimal);
        panelNomeAnimal.setLayout(panelNomeAnimalLayout);
        panelNomeAnimalLayout.setHorizontalGroup(
            panelNomeAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 674, Short.MAX_VALUE)
        );
        panelNomeAnimalLayout.setVerticalGroup(
            panelNomeAnimalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 105, Short.MAX_VALUE)
        );

        panelCreditos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelCreditos.setToolTipText(resourceMap.getString("panelCreditos.toolTipText")); // NOI18N
        panelCreditos.setName("panelCreditos"); // NOI18N

        qtdeCreditos.setText(resourceMap.getString("qtdeCreditos.text")); // NOI18N
        qtdeCreditos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        qtdeCreditos.setName("qtdeCreditos"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        vlrAMultiplicar.setText(resourceMap.getString("vlrAMultiplicar.text")); // NOI18N
        vlrAMultiplicar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        vlrAMultiplicar.setName("vlrAMultiplicar"); // NOI18N

        javax.swing.GroupLayout panelCreditosLayout = new javax.swing.GroupLayout(panelCreditos);
        panelCreditos.setLayout(panelCreditosLayout);
        panelCreditosLayout.setHorizontalGroup(
            panelCreditosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCreditosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(qtdeCreditos, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(vlrAMultiplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelCreditosLayout.setVerticalGroup(
            panelCreditosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCreditosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelCreditosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCreditosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)
                        .addComponent(jLabel5)
                        .addComponent(vlrAMultiplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(qtdeCreditos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        salvarNoRanking.setText(resourceMap.getString("salvarNoRanking.text")); // NOI18N
        salvarNoRanking.setName("salvarNoRanking"); // NOI18N
        salvarNoRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarNoRankingActionPerformed(evt);
            }
        });

        novaFase.setText(resourceMap.getString("novaFase.text")); // NOI18N
        novaFase.setName("novaFase"); // NOI18N
        novaFase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novaFaseActionPerformed(evt);
            }
        });

        dicaEspecial.setText(resourceMap.getString("dicaEspecial.text")); // NOI18N
        dicaEspecial.setName("dicaEspecial"); // NOI18N
        dicaEspecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dicaEspecialActionPerformed(evt);
            }
        });

        sair.setText(resourceMap.getString("sair.text")); // NOI18N
        sair.setName("sair"); // NOI18N
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        dicasServidor.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("dicasServidor.border.lineColor"), 2, true)); // NOI18N
        dicasServidor.setFont(resourceMap.getFont("dicasServidor.font")); // NOI18N
        dicasServidor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Descrição da Dica"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dicasServidor.setName("dicasServidor"); // NOI18N
        dicasServidor.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(dicasServidor);
        dicasServidor.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("dicasServidor.columnModel.title0")); // NOI18N

        fotoAnimal.setText(resourceMap.getString("fotoAnimal.text")); // NOI18N
        fotoAnimal.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        fotoAnimal.setName("fotoAnimal"); // NOI18N

        remenberDica.setText(resourceMap.getString("remenberDica.text")); // NOI18N
        remenberDica.setName("remenberDica"); // NOI18N
        remenberDica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remenberDicaActionPerformed(evt);
            }
        });

        maisDica.setText(resourceMap.getString("maisDica.text")); // NOI18N
        maisDica.setName("maisDica"); // NOI18N
        maisDica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maisDicaActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.LineBorder(resourceMap.getColor("jPanel1.border.lineColor"), 1, true)); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        letraDigitada.setColumns(1);
        try {
            letraDigitada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("?")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        letraDigitada.setToolTipText(resourceMap.getString("letraDigitada.toolTipText")); // NOI18N
        letraDigitada.setFont(resourceMap.getFont("letraDigitada.font")); // NOI18N
        letraDigitada.setName("letraDigitada"); // NOI18N
        letraDigitada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                letraDigitadaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(letraDigitada, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(letraDigitada, javax.swing.GroupLayout.PREFERRED_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        cronometro.setFont(resourceMap.getFont("cronometro.font")); // NOI18N
        cronometro.setForeground(resourceMap.getColor("cronometro.foreground")); // NOI18N
        cronometro.setText(resourceMap.getString("cronometro.text")); // NOI18N
        cronometro.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        cronometro.setName("cronometro"); // NOI18N

        novoJogo.setText(resourceMap.getString("novoJogo.text")); // NOI18N
        novoJogo.setName("novoJogo"); // NOI18N
        novoJogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoJogoActionPerformed(evt);
            }
        });

        rankingGeral.setText(resourceMap.getString("rankingGeral.text")); // NOI18N
        rankingGeral.setName("rankingGeral"); // NOI18N
        rankingGeral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingGeralActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(fotoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                        .addComponent(cronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(321, 321, 321)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelNomeAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 684, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(novaFase)
                            .addComponent(rankingGeral))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addComponent(novoJogo, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sair)
                                .addGap(14, 14, 14)
                                .addComponent(maisDica)
                                .addGap(5, 5, 5))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(salvarNoRanking)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(dicaEspecial)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(remenberDica, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                            .addComponent(panelCreditos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(241, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(225, 225, 225))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(339, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(334, 334, 334))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fotoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelNomeAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(remenberDica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dicaEspecial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maisDica, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addComponent(sair, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(novaFase, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(novoJogo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(panelCreditos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(salvarNoRanking)
                            .addComponent(rankingGeral))
                        .addGap(20, 20, 20))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gerenciaCrono(){
       Runnable crono = new Runnable() {  
           
            @Override
            public void run() {
                Calendar tempo = Calendar.getInstance();
//                while (System.currentTimeMillis() - tempoInicial < 15000) {
                while (System.currentTimeMillis() - tempoInicial < 15000) {
                    tempo.setTimeInMillis( System.currentTimeMillis() - tempoInicial );                    
                    cronometro.setText(
                        tempo.get( Calendar.MINUTE ) +
                        ":" +
                        tempo.get( Calendar.SECOND ) +
                        ":" +
                        tempo.get( Calendar.MILLISECOND )
                    );                    
                }                
                     acabouTempo = true;                                    
            } 
        };
        t1 = new Thread(crono);
        t1.start();        
    }    
    
    private void add3LetrasNoPanel() throws ParseException{
        panelNomeAnimal.setLayout(new BorderLayout()); 
        add3 = new AddDinamicoDe3TextFields();
        panelNomeAnimal.add(add3);
    }
    
    private void add4LetrasNoPanel() throws ParseException{
        panelNomeAnimal.setLayout(new BorderLayout()); 
         add4 = new AddDinamicoDe4TextFields();
        panelNomeAnimal.add(add4);

       }
    
    private void add5LetrasNoPanel() throws ParseException{        
        panelNomeAnimal.setLayout(new BorderLayout());
        add5 = new AddDinamicoDe5TextFields();
        panelNomeAnimal.add(add5);
    }
    
    private void add6LetrasNoPanel() throws ParseException{        
        panelNomeAnimal.setLayout(new BorderLayout()); 
        add6 = new AddDinamicoDe6TextFields();
        panelNomeAnimal.add(add6);
    }
    
   private void add7LetrasNoPanel() throws ParseException{        
        panelNomeAnimal.setLayout(new BorderLayout()); 
        add7 = new AddDinamicoDe7TextFields();
        panelNomeAnimal.add(add7);
    }
    
    private void add8LetrasNoPanel() throws ParseException{        
        panelNomeAnimal.setLayout(new BorderLayout()); 
        add8 = new AddDinamicoDe8TextFields();
        panelNomeAnimal.add(add8);
    }
    
    private void add9LetrasNoPanel() throws ParseException{        
        panelNomeAnimal.setLayout(new BorderLayout()); 
        add9 = new AddDinamicoDe9TextFields();
        panelNomeAnimal.add(add9);
    }
   
    private void add10LetrasNoPanel() throws ParseException{       
        panelNomeAnimal.setLayout(new BorderLayout()); 
        add10 = new AddDinamicoDe10TextFields();
        panelNomeAnimal.add(add10);
    }
    
     private void populaTable(Dicas dados){         
           DefaultTableModel modelo = (DefaultTableModel) dicasServidor.getModel();
           try{               
                String descricao = dados.getDescricao();
                modelo.addRow(new Object[]{descricao});
                dicasServidor.setModel(modelo);
                qtdeDicasRestantes--;
          }catch(Exception ex){
              ex.printStackTrace();
          }
    }
    
    private void controleTempoPraDicas(){
        if (System.currentTimeMillis() - tempoInicial > 30000) { // 30 segundos  
            
        }  
    }
    
    private void zeraFormPraNovaFase(){
        maisDica.setEnabled(false);
        dicaEspecial.setEnabled(false);
        remenberDica.setVisible(false);
        novaFase.setEnabled(true);
        salvarNoRanking.setEnabled(false);
        DefaultTableModel modelo = (DefaultTableModel) dicasServidor.getModel();
        dicasServidor.removeAll();
        modelo.setNumRows(0);
        dicasServidor.setModel(modelo);
        letraDigitada.setText("");
        letraDigitada.setEditable(false);        
    }
    
      private boolean controleTempoPorNivel(long tempoAtual){          
          boolean retorno = false;
          if (tempoAtual - tempoInicial > 30000) { // 30 segundos  
                System.out.println("\n\n acabou o tempo");   
                numCreditos = numCreditos - 2;
                qtdeCreditos.setText(String.valueOf(numCreditos));
                zeraFormPraNovaFase();
                retorno = true;
         }else{
              retorno = false;
          }
          return retorno;
    }
    
    private void preencheFormPraJogar() throws ParseException{
       animaisJaJogados.add(dadosAnimal);
       dicasServidor.removeAll();
       DefaultTableModel modelo = (DefaultTableModel) dicasServidor.getModel();
       modelo.setNumRows(0);
       dicasServidor.setModel(modelo);
        try {
            ByteParaImagem(dadosAnimal.getFotoComSombra());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        dicasProAnimal.append(dadosAnimal.getDicas());
        int tamNomeAnimal = dadosAnimal.getNome().length();
        
        if(tamNomeAnimal == 3){
            add3LetrasNoPanel();
            add3.setField1("_");
            add3.setField2("_");
            add3.setField3("_");
        }else if(tamNomeAnimal == 4){
           add4LetrasNoPanel();
           add4.setField1("_");
           add4.setField2("_");
           add4.setField3("_");
           add4.setField4("_");
        }else if(tamNomeAnimal == 5){
            add5LetrasNoPanel();
            add5.setField1("_");
            add5.setField2("_");
            add5.setField3("_");
            add5.setField4("_");
            add5.setField5("_");
        }else if(tamNomeAnimal == 6){
            add6LetrasNoPanel();
            add6.setField1("_");
            add6.setField2("_");
            add6.setField3("_");
            add6.setField4("_");
            add6.setField5("_");
            add6.setField6("_");
        }else if(tamNomeAnimal == 7){
            add7LetrasNoPanel();
            add7.setField1("_");
            add7.setField2("_");
            add7.setField3("_");
            add7.setField4("_");
            add7.setField5("_");
            add7.setField6("_");
            add7.setField7("_");
        }else if(tamNomeAnimal == 8){
            add8LetrasNoPanel();
            add8.setField1("_");
            add8.setField2("_");
            add8.setField3("_");
            add8.setField4("_");
            add8.setField5("_");
            add8.setField6("_");
            add8.setField7("_");
            add8.setField8("_");
        }else if(tamNomeAnimal == 9){
            add9LetrasNoPanel();
            add9.setField1("_");
            add9.setField2("_");
            add9.setField3("_");
            add9.setField4("_");
            add9.setField5("_");
            add9.setField6("_");
            add9.setField7("_");
            add9.setField8("_");
            add9.setField9("_");
        }else if(tamNomeAnimal == 10){
            add10LetrasNoPanel();
            add10.setField1("_");
            add10.setField2("_");
            add10.setField3("_");
            add10.setField4("_");
            add10.setField5("_");
            add10.setField6("_");
            add10.setField7("_");
            add10.setField8("_");
            add10.setField9("_");
            add10.setField10("_");
        }else{
            JOptionPane.showMessageDialog(null, "O nome do animal é menor que 3 ou maior que 10"
                    , "Nome do animal inconsistente", JOptionPane.ERROR_MESSAGE);
        }
        letraDigitada.setEditable(true);
        letraDigitada.grabFocus();
        this.setVisible(true); 
        tempoInicial = System.currentTimeMillis();
        controleTempoPorNivel(tempoInicial);
    }
    
    public void ByteParaImagem(byte[] bytes) throws Exception {
	try {      
               ImageIcon logo = new ImageIcon(bytes);
               fotoAnimal.removeAll();
               fotoAnimal.setIcon(new ImageIcon(logo.getImage().getScaledInstance(fotoAnimal.getWidth(), fotoAnimal.getHeight()
                                                                                  , Image.SCALE_DEFAULT)));
        } catch (Exception e) {
                e.printStackTrace();
        }
    }
    
    private void dicaEspecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dicaEspecialActionPerformed
          int resp = JOptionPane.showConfirmDialog(null,"A dica especial irá lhe custar 3 créditos!\n \tDeseja prosseguir?", "Aviso", JOptionPane.YES_NO_OPTION);
          if(resp == JOptionPane.YES_OPTION){
            try {
                int newVlrCredito = servidor.atualizaCreditos(3);
                vlrMultiplicador = newVlrCredito;
                qtdeCreditos.setText(String.valueOf(vlrMultiplicador));
            } catch (RemoteException ex) {
                ex.printStackTrace();
            }
              JOptionPane.showMessageDialog(null, dadosAnimal.getDicaEspecial(),"DICA ESPECIAL",JOptionPane.INFORMATION_MESSAGE);
              remenberDica.setVisible(true);
              dicaEspecial.setEnabled(false);
          }
    }//GEN-LAST:event_dicaEspecialActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        this.dispose();
        loginDialog.setModal(true);
        loginDialog.setVisible(true);
    }//GEN-LAST:event_sairActionPerformed

    private void remenberDicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remenberDicaActionPerformed
       JOptionPane.showMessageDialog(null, dadosAnimal.getDicaEspecial(),"DICA ESPECIAL",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_remenberDicaActionPerformed

    private void salvarNoRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarNoRankingActionPerformed
        String nomeInformado = JOptionPane.showInputDialog(null, "Nome a ser gravado no Ranking:", "Informe seu Nome"
                                                           ,JOptionPane.QUESTION_MESSAGE);
        if(nomeInformado == null ||nomeInformado.equals("")){
            JOptionPane.showMessageDialog(null, "Gravação no ranking cancelada!","Aviso",JOptionPane.INFORMATION_MESSAGE);
        }else{
            Jogador jogador = new Jogador();
            jogador.setNome(nomeInformado);        
            jogador.setDataSalvo(new Date());
            jogador.setPontuacao(Integer.parseInt(qtdeCreditos.getText()) * Integer.parseInt(vlrAMultiplicar.getText()));
            jogador.setQtdeFases(qtdeFases);
            int retorno = 0;
            try {
                retorno = servidor.gravaJogador(jogador);
            } catch (RemoteException ex) {
                ex.printStackTrace();
            }
            if(retorno > 0){
                JOptionPane.showMessageDialog(null,"Voçê foi cadastrado no Ranking!\n\t Sua posição é a :"+retorno+"ª.\nParabéns!"
                                              , "Ranking Atualizado", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Erro ao gravar seu registro no ranking", "Erro na atualização do ranking"
                                              , JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_salvarNoRankingActionPerformed
    
    private void maisDicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maisDicaActionPerformed
        int codDica = 0;
             if(dicasProAnimal.indexOf(",")>0){
                    codDica =Integer.parseInt(dicasProAnimal.substring(0, dicasProAnimal.indexOf(",")));
             }else{
                    codDica =Integer.parseInt(dicasProAnimal.substring(0, dicasProAnimal.length()));
             }
                if(!dicasJaMostradas.contains(codDica)){
                        dicasJaMostradas.add(codDica);
                        daoDicas = new DaoDicas();
                        Dicas newDica = daoDicas.selectDica(codDica);
                        if(newDica != null){
                            populaTable(newDica);
                            try {
                                if(retornoVlrMultiplicante == 0){
                                     numCreditos--;
                                     qtdeCreditos.setText(String.valueOf(numCreditos));
                                }else{
                                     retornoVlrMultiplicante = servidor.atualizaVlrMultiplicante(200);
                                     vlrAMultiplicar.setText(String.valueOf(retornoVlrMultiplicante));
                                }
                            } catch (RemoteException ex) {
                                ex.printStackTrace();
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "O codigo: "+codDica+" não existe no banco!"
                                                                    , "Verifique", JOptionPane.ERROR_MESSAGE);
                        }
                }
                dicasProAnimal = new StringBuilder(dicasProAnimal.substring(dicasProAnimal.indexOf(",")+1
                                                                            ,dicasProAnimal.length()));
    }//GEN-LAST:event_maisDicaActionPerformed
    
    private void letraDigitadaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_letraDigitadaKeyReleased
//        if(!controleTempoPorNivel(System.currentTimeMillis())){
        if(acabouTempo != true){
        char letraDig = evt.getKeyChar();
        String nome = dadosAnimal.getNome();
              if(nome.length() == 4){
                  int temAletra = nome.indexOf(letraDig);
                    if(temAletra < 0){
                        if(numCreditos != 0){
                            numCreditos--;
                        }else{
                            JOptionPane.showMessageDialog(null,"Acabou seus créditos!","Fim de Jogo",JOptionPane.INFORMATION_MESSAGE);
                            novoJogo.setEnabled(true);
                            salvarNoRanking.setEnabled(true);
                        }
                        qtdeCreditos.setText(String.valueOf(numCreditos));
                    }else{  
                    
                        if(letraDig == nome.charAt(0)){
                            add4.habilitaField1(true,String.valueOf(nome.charAt(0)));
                        }                
                        if(letraDig == nome.charAt(1)){
                            add4.habilitaField2(true,String.valueOf(nome.charAt(1)));
                        }
                        if(letraDig == nome.charAt(2)){
                            add4.habilitaField3(true,String.valueOf(nome.charAt(2)));
                        }
                        if(letraDig == nome.charAt(3)){
                            add4.habilitaField4(true,String.valueOf(nome.charAt(3)));
                        }                  

                        if(add4.verificaNomeAnimal().equalsIgnoreCase(dadosAnimal.getNome())){
                            try {
                                qtdeFases++;
                                ByteParaImagem(dadosAnimal.getFotoNormal());
                                JOptionPane.showMessageDialog(null, "Parabéns! Voçê finalizou esta fase!","Felicitações"
                                                                  , JOptionPane.INFORMATION_MESSAGE);
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
            }else if(nome.length() == 3){
                    int temAletra = nome.indexOf(letraDig);
                    if(temAletra < 0){
                        if(numCreditos != 0){
                            numCreditos--;
                        }else{
                            JOptionPane.showMessageDialog(null,"Acabou seus créditos!","Fim de Jogo",JOptionPane.INFORMATION_MESSAGE);
                            novoJogo.setEnabled(true);
                            salvarNoRanking.setEnabled(true);
                        }
                        qtdeCreditos.setText(String.valueOf(numCreditos));
                    }else{ 
                        if(letraDig == nome.charAt(0)){
                            add3.habilitaField1(true,String.valueOf(nome.charAt(0)));
                        }                
                        if(letraDig == nome.charAt(1)){
                            add3.habilitaField2(true,String.valueOf(nome.charAt(1)));
                        }
                        if(letraDig == nome.charAt(2)){
                            add3.habilitaField3(true,String.valueOf(nome.charAt(2)));
                        }  
                        if(add3.verificaNomeAnimal().equalsIgnoreCase(dadosAnimal.getNome())){
                            try {
                                qtdeFases++;
                                ByteParaImagem(dadosAnimal.getFotoNormal());
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
            }else if(nome.length() == 5){
                    int temAletra = nome.indexOf(letraDig);
                    if(temAletra < 0){
                        if(numCreditos != 0){
                            numCreditos--;
                        }else{
                            JOptionPane.showMessageDialog(null,"Acabou seus créditos!","Fim de Jogo",JOptionPane.INFORMATION_MESSAGE);
                            novoJogo.setEnabled(true);
                            salvarNoRanking.setEnabled(true);
                        }
                        qtdeCreditos.setText(String.valueOf(numCreditos));
                    }else{ 
                        if(letraDig == nome.charAt(0)){
                            add5.habilitaField1(true,String.valueOf(nome.charAt(0)));
                        }                
                        if(letraDig == nome.charAt(1)){
                            add5.habilitaField2(true,String.valueOf(nome.charAt(1)));
                        }
                        if(letraDig == nome.charAt(2)){
                            add5.habilitaField3(true,String.valueOf(nome.charAt(2)));
                        }
                        if(letraDig == nome.charAt(3)){
                            add5.habilitaField4(true,String.valueOf(nome.charAt(3)));
                        }  
                        if(letraDig == nome.charAt(4)){
                            add5.habilitaField5(true,String.valueOf(nome.charAt(4)));
                        }
                        if(add5.verificaNomeAnimal().equalsIgnoreCase(dadosAnimal.getNome())){
                            try {
                                qtdeFases++;
                                ByteParaImagem(dadosAnimal.getFotoNormal());
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
            }else if(nome.length() == 6){
                    int temAletra = nome.indexOf(letraDig);
                    if(temAletra < 0){
                        if(numCreditos != 0){
                            numCreditos--;
                        }else{
                            JOptionPane.showMessageDialog(null,"Acabou seus créditos!","Fim de Jogo",JOptionPane.INFORMATION_MESSAGE);
                            novoJogo.setEnabled(true);
                            salvarNoRanking.setEnabled(true);
                        }
                        qtdeCreditos.setText(String.valueOf(numCreditos));
                    }else{ 
                        if(letraDig == nome.charAt(0)){
                            add6.habilitaField1(true,String.valueOf(nome.charAt(0)));
                        }                
                        if(letraDig == nome.charAt(1)){
                            add6.habilitaField2(true,String.valueOf(nome.charAt(1)));
                        }
                        if(letraDig == nome.charAt(2)){
                            add6.habilitaField3(true,String.valueOf(nome.charAt(2)));
                        }
                        if(letraDig == nome.charAt(3)){
                            add6.habilitaField4(true,String.valueOf(nome.charAt(3)));
                        }  
                        if(letraDig == nome.charAt(4)){
                            add6.habilitaField5(true,String.valueOf(nome.charAt(4)));
                        }  
                        if(letraDig == nome.charAt(5)){
                            add6.habilitaField6(true,String.valueOf(nome.charAt(5)));
                        } 
                        if(add6.verificaNomeAnimal().equalsIgnoreCase(dadosAnimal.getNome())){
                            try {
                                qtdeFases++;
                                ByteParaImagem(dadosAnimal.getFotoNormal());
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
            }else if(nome.length() == 7){
                    int temAletra = nome.indexOf(letraDig);
                    if(temAletra < 0){
                        if(numCreditos != 0){
                            numCreditos--;
                        }else{
                            JOptionPane.showMessageDialog(null,"Acabou seus créditos!","Fim de Jogo",JOptionPane.INFORMATION_MESSAGE);
                            novoJogo.setEnabled(true);
                            salvarNoRanking.setEnabled(true);
                        }
                        qtdeCreditos.setText(String.valueOf(numCreditos));
                    }else{ 
                        if(letraDig == nome.charAt(0)){
                            add7.habilitaField1(true,String.valueOf(nome.charAt(0)));
                        }                
                        if(letraDig == nome.charAt(1)){
                            add7.habilitaField2(true,String.valueOf(nome.charAt(1)));
                        }
                        if(letraDig == nome.charAt(2)){
                            add7.habilitaField3(true,String.valueOf(nome.charAt(2)));
                        }
                        if(letraDig == nome.charAt(3)){
                            add7.habilitaField4(true,String.valueOf(nome.charAt(3)));
                        }  
                        if(letraDig == nome.charAt(4)){
                            add7.habilitaField5(true,String.valueOf(nome.charAt(4)));
                        }  
                        if(letraDig == nome.charAt(5)){
                            add7.habilitaField6(true,String.valueOf(nome.charAt(5)));
                        } 
                         if(letraDig == nome.charAt(6)){
                            add7.habilitaField7(true,String.valueOf(nome.charAt(6)));
                        } 
                         if(add7.verificaNomeAnimal().equalsIgnoreCase(dadosAnimal.getNome())){
                            try {
                                qtdeFases++;
                                ByteParaImagem(dadosAnimal.getFotoNormal());
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
            }else if(nome.length() == 8){
                    int temAletra = nome.indexOf(letraDig);
                    if(temAletra < 0){
                        if(numCreditos != 0){
                            numCreditos--;
                        }else{
                            JOptionPane.showMessageDialog(null,"Acabou seus créditos!","Fim de Jogo",JOptionPane.INFORMATION_MESSAGE);
                            novoJogo.setEnabled(true);
                            salvarNoRanking.setEnabled(true);
                        }
                        qtdeCreditos.setText(String.valueOf(numCreditos));
                    }else{ 
                        if(letraDig == nome.charAt(0)){
                            add8.habilitaField1(true,String.valueOf(nome.charAt(0)));
                        }                
                        if(letraDig == nome.charAt(1)){
                            add8.habilitaField2(true,String.valueOf(nome.charAt(1)));
                        }
                        if(letraDig == nome.charAt(2)){
                            add8.habilitaField3(true,String.valueOf(nome.charAt(2)));
                        }
                        if(letraDig == nome.charAt(3)){
                            add8.habilitaField4(true,String.valueOf(nome.charAt(3)));
                        } 
                        if(letraDig == nome.charAt(4)){
                            add8.habilitaField5(true,String.valueOf(nome.charAt(4)));
                        }  
                        if(letraDig == nome.charAt(5)){
                            add8.habilitaField6(true,String.valueOf(nome.charAt(5)));
                        } 
                        if(letraDig == nome.charAt(6)){
                            add8.habilitaField7(true,String.valueOf(nome.charAt(6)));
                        } 
                        if(letraDig == nome.charAt(7)){
                            add8.habilitaField8(true,String.valueOf(nome.charAt(7)));
                        } 
                        if(add8.verificaNomeAnimal().equalsIgnoreCase(dadosAnimal.getNome())){
                            try {
                                qtdeFases++;
                                ByteParaImagem(dadosAnimal.getFotoNormal());
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
            }else if(nome.length() == 9){
                    int temAletra = nome.indexOf(letraDig);
                    if(temAletra < 0){
                        if(numCreditos != 0){
                            numCreditos--;
                        }else{
                            JOptionPane.showMessageDialog(null,"Acabou seus créditos!","Fim de Jogo",JOptionPane.INFORMATION_MESSAGE);
                            novoJogo.setEnabled(true);
                            salvarNoRanking.setEnabled(true);
                        }
                        qtdeCreditos.setText(String.valueOf(numCreditos));
                    }else{ 
                        if(letraDig == nome.charAt(0)){
                            add9.habilitaField1(true,String.valueOf(nome.charAt(0)));
                        }                
                        if(letraDig == nome.charAt(1)){
                            add9.habilitaField2(true,String.valueOf(nome.charAt(1)));
                        }
                        if(letraDig == nome.charAt(2)){
                            add9.habilitaField3(true,String.valueOf(nome.charAt(2)));
                        }
                        if(letraDig == nome.charAt(3)){
                            add9.habilitaField4(true,String.valueOf(nome.charAt(3)));
                        } 
                        if(letraDig == nome.charAt(4)){
                            add9.habilitaField5(true,String.valueOf(nome.charAt(4)));
                        }  
                        if(letraDig == nome.charAt(5)){
                            add9.habilitaField6(true,String.valueOf(nome.charAt(5)));
                        } 
                        if(letraDig == nome.charAt(6)){
                            add9.habilitaField7(true,String.valueOf(nome.charAt(6)));
                        } 
                        if(letraDig == nome.charAt(7)){
                            add9.habilitaField8(true,String.valueOf(nome.charAt(7)));
                        } 
                        if(letraDig == nome.charAt(8)){
                            add9.habilitaField9(true,String.valueOf(nome.charAt(8)));
                        }       
                        if(add9.verificaNomeAnimal().equalsIgnoreCase(dadosAnimal.getNome())){
                            try {
                                qtdeFases++;
                                ByteParaImagem(dadosAnimal.getFotoNormal());
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
            }else if(nome.length() == 10){
                    int temAletra = nome.indexOf(letraDig);
                    if(temAletra < 0){
                        if(numCreditos != 0){
                            numCreditos--;
                        }else{
                            JOptionPane.showMessageDialog(null,"Acabou seus créditos!","Fim de Jogo",JOptionPane.INFORMATION_MESSAGE);
                            novoJogo.setEnabled(true);
                            salvarNoRanking.setEnabled(true);
                        }
                        qtdeCreditos.setText(String.valueOf(numCreditos));
                    }else{ 
                        if(letraDig == nome.charAt(0)){
                            add10.habilitaField1(true,String.valueOf(nome.charAt(0)));
                        }                
                        if(letraDig == nome.charAt(1)){
                            add10.habilitaField2(true,String.valueOf(nome.charAt(1)));
                        }
                        if(letraDig == nome.charAt(2)){
                            add10.habilitaField3(true,String.valueOf(nome.charAt(2)));
                        }
                        if(letraDig == nome.charAt(3)){
                            add10.habilitaField4(true,String.valueOf(nome.charAt(3)));
                        } 
                        if(letraDig == nome.charAt(4)){
                            add10.habilitaField5(true,String.valueOf(nome.charAt(4)));
                        }  
                        if(letraDig == nome.charAt(5)){
                            add10.habilitaField6(true,String.valueOf(nome.charAt(5)));
                        } 
                        if(letraDig == nome.charAt(6)){
                            add10.habilitaField7(true,String.valueOf(nome.charAt(6)));
                        } 
                        if(letraDig == nome.charAt(7)){
                            add10.habilitaField8(true,String.valueOf(nome.charAt(7)));
                        } 
                        if(letraDig == nome.charAt(8)){
                            add10.habilitaField9(true,String.valueOf(nome.charAt(8)));
                        }
                        if(letraDig == nome.charAt(9)){
                            add10.habilitaField10(true,String.valueOf(nome.charAt(9)));
                        }
                        if(add10.verificaNomeAnimal().equalsIgnoreCase(dadosAnimal.getNome())){
                            try {
                                qtdeFases++;
                                ByteParaImagem(dadosAnimal.getFotoNormal());
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
            }
        }else{ 
              JOptionPane.showMessageDialog(null, "Não da mais para digitar]");
            }   
        letraDigitada.setText("");
        letraDigitada.grabFocus();
    }//GEN-LAST:event_letraDigitadaKeyReleased

    private void finalizaInternalFrame(){
         if(add3 != null){
            add3.dispose();
        }
        if(add4 != null){
            add4.dispose();
        }
        if(add5 != null){
            add5.dispose();
        }
        if(add6 != null){
            add6.dispose();
        }
         if(add7 != null){
            add7.dispose();
        }
        if(add8 != null){
            add8.dispose();
        }
         if(add9 != null){
            add9.dispose();
        }
        if(add10 != null){
            add10.dispose();
        }
    }
    
    private Object verificaInternalFrame(){
        Object retorno = null;
        
        if(add3 != null){
            retorno = add3;            
        }
        if(add4 != null){
            retorno = add4;
        }
        if(add5 != null){
            retorno = add5;
        }
        if(add6 != null){
            retorno = add6;
        }
        if(add7 != null){
            retorno = add7;
        }
        if(add8 != null){
            retorno = add8;
        }
         if(add9 != null){
           retorno = add9;
        }
        if(add10 != null){
            retorno = add10;
        }
        return retorno;
    }
    
    private void novaFaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novaFaseActionPerformed
        Object returnClass = verificaInternalFrame();
        String retornoInvocacao = "";
        try {
            Method metodo = returnClass.getClass().getMethod("verificaNomeAnimal");
            retornoInvocacao = (String) metodo.invoke(returnClass);
            } catch (IllegalAccessException ex) {
                ex.printStackTrace();
            } catch (IllegalArgumentException ex) {
                ex.printStackTrace();
            } catch (InvocationTargetException ex) {
                ex.printStackTrace();            
            } catch (NoSuchMethodException ex) {
                ex.printStackTrace();
            } catch (SecurityException ex) {
                ex.printStackTrace();
            }
        
        if(!retornoInvocacao.equalsIgnoreCase(dadosAnimal.getNome())){
            if(numCreditos != 0){
                numCreditos--;
                qtdeCreditos.setText(String.valueOf(numCreditos));
            }else{
                JOptionPane.showMessageDialog(null, "Acabaram-se os seus créditos!", "Fim de Jogo", JOptionPane.INFORMATION_MESSAGE);
                novoJogo.setEnabled(true);
                salvarNoRanking.setEnabled(true);
            }
        }
        
        try {
            this.dadosAnimal = servidor.novoAnimalJogar(animaisJaJogados);
            try {
                if(dadosAnimal != null){
                    finalizaInternalFrame();
                    preencheFormPraJogar();  
                    
                    acabouTempo = false;
                    gerenciaCrono();
                    //    THREAD REINICIADA
                    
                }else{
                    JOptionPane.showMessageDialog(null,"Não há mais nenhuma fase nova disponível no jogo", "Imprevisto!"
                                                      ,JOptionPane.INFORMATION_MESSAGE);
                    salvarNoRanking.setEnabled(true);
                    novoJogo.setEnabled(true);
                }
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_novaFaseActionPerformed

    private void novoJogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoJogoActionPerformed
        try {
            animaisJaJogados = new ArrayList<Animal>();
            vlrMultiplicador = 1000;
            numCreditos = 10;
            qtdeCreditos.setText(String.valueOf(numCreditos));
            vlrAMultiplicar.setText(String.valueOf(vlrMultiplicador));
            
            this.dadosAnimal = servidor.novoAnimalJogar(animaisJaJogados);
            try {
                if(dadosAnimal != null){
                     finalizaInternalFrame();
                    preencheFormPraJogar();
                }
                else{
                    JOptionPane.showMessageDialog(null,"Não há mais nenhuma fase disponível no servidor do jogo", "Imprevisto!"
                                                      ,JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
        novoJogo.setEnabled(false);
    }//GEN-LAST:event_novoJogoActionPerformed

    private void rankingGeralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingGeralActionPerformed
        try {
            LayoutRelatorioRanking ranking = new LayoutRelatorioRanking(this);
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_rankingGeralActionPerformed

    private void instanciaConexaoServidor(){
         try {
            Registry registry = LocateRegistry.getRegistry("localhost");
            servidor = (I_RMI) Naming.lookup("rmi://localhost:1099/JogoEducativo");
            } catch (RemoteException e) {
            System.out.println();
            System.out.println("RemoteException: " + e.toString());
        } catch (NotBoundException e) {
            System.out.println();
            System.out.println("NotBoundException: " + e.toString());
        } catch (Exception e) {
            System.out.println("Erro: " + e.getMessage());
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LayoutUsuario().setVisible(true);          
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cronometro;
    private javax.swing.JButton dicaEspecial;
    private javax.swing.JTable dicasServidor;
    private javax.swing.JLabel fotoAnimal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField letraDigitada;
    private javax.swing.JButton maisDica;
    private javax.swing.JButton novaFase;
    private javax.swing.JButton novoJogo;
    private javax.swing.JPanel panelCreditos;
    private javax.swing.JPanel panelNomeAnimal;
    private javax.swing.JLabel qtdeCreditos;
    private javax.swing.JButton rankingGeral;
    private javax.swing.JButton remenberDica;
    private javax.swing.JButton sair;
    private javax.swing.JButton salvarNoRanking;
    private javax.swing.JLabel vlrAMultiplicar;
    // End of variables declaration//GEN-END:variables
}
